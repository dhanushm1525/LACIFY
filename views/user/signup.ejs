<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="tailwindcss/output.css" />
    <title>User Signup</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
      integrity="sha512-Kc323vGBEqzTmouAECnVceyQqyqdsSiqLQISBL29aUW4U/M7pSPA/gEUZQqv1cwx4OnYxTxve5UMg5GT6L4JJg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />

    
  </head>

  <body class="bg-gray-300">
    <!------------ Navbar ---------->
    <%- include("../partials/usernav") %>
    <div class="mt-16"></div>

    <!-- Centered Signup Card -->
    <div
      class="mt-28 flex items-center justify-center my-16 px-4 sm:px-6 lg:px-8"
    >
      <div
        class="w-full max-w-md p-8 bg-white shadow-lg rounded-2xl border border-black/20"
      >
        <h2 class="text-2xl font-semibold text-center mb-6">Signup</h2>

        <!-- Signup Form -->
        <form
          action="/signup"
          method="post"
          id="signup-form"
          class="space-y-4"
          novalidate
        >
          <!-- First Name Input -->
          <div>
            <input
              type="text"
              name="firstName"
              placeholder="First Name"
              id="firstName"
              class="w-full p-3 rounded-lg bg-gray-300 text-slate-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
              minlength="3"
              maxlength="50"
            />
            <p
              id="firstNameError"
              class="text-[#9B1C1C] text-xs mt-1 hidden"
            ></p>
          </div>

          <!-- Last Name Input -->
          <div>
            <input
              type="text"
              name="lastName"
              placeholder="Last Name"
              id="lastName"
              class="w-full p-3 rounded-lg bg-gray-300 text-slate-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
              minlength="1"
              maxlength="50"
            />
            <p
              id="lastNameError"
              class="text-[#9B1C1C] text-xs mt-1 hidden"
            ></p>
          </div>

          <!-- Email Input -->
          <div>
            <input
              type="email"
              name="email"
              placeholder="Email"
              id="email"
              class="w-full p-3 rounded-lg bg-gray-300 text-slate-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
            <p id="emailError" class="text-[#9B1C1C] text-xs mt-1 hidden"></p>
          </div>

          <!-- Password Input -->
          <div class="relative">
            <input
              type="password"
              name="password"
              placeholder="Password"
              id="password"
              class="w-full p-3 rounded-lg bg-gray-300 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500"
              minlength="8"
              maxlength="12"
            />
            <button type="button" class="absolute right-3 top-3 text-gray-600">
              <i class="fa-regular fa-eye"></i>
            </button>
            <p
              id="passwordError"
              class="text-[#9B1C1C] text-xs mt-1 hidden"
            ></p>
          </div>

          <!-- Confirm Password Input -->
          <div class="relative">
            <input
              type="password"
              name="confirmPassword"
              placeholder="Confirm Password"
              id="confirmPassword"
              class="w-full p-3 rounded-lg bg-gray-300 text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500"
              minlength="8"
              maxlength="12"
            />
            <button type="button" class="absolute right-3 top-3 text-gray-600">
              <i class="fa-regular fa-eye"></i>
            </button>
            <p
              id="confirmPasswordError"
              class="text-[#9B1C1C] text-xs mt-1 hidden"
            ></p>
          </div>
          <!-- Login Links -->
          <div class="flex justify-between text-sm text-gray-500">
            <a href="/login" class="hover:underline"> Login</a>
          </div>
          <!-- Submit Button -->
          <button
            type="submit"
            class="w-full py-3 bg-black text-white font-semibold rounded-lg hover:bg-gray-800"
          >
            Sign Up
          </button>
        </form>

        <!-- General Error Message -->
        <p
          id="generalError"
          class="text-[#9B1C1C] text-xs mt-2 text-center"
        ></p>

        <!-- Google Sign in -->
        <div id="google-auth-div">
          <div
            class="flex justify-center text-center mt-6 text-gray-500 text-sm"
          >
            Or continue with Google
          </div>
          <a
            class="flex justify-center mt-6"
            href="/auth/google?trigger=signup"
          >
            <i class="fa-brands fa-google fa-lg" style="color: #b12020"></i>
          </a>
        </div>

        <!-- Add this right after your form -->
        <div id="loading-spinner" class="hidden fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div class="bg-white p-5 rounded-lg flex flex-col items-center">
            <div class="w-10 h-10 border-4 border-gray-200 border-t-blue-500 rounded-full animate-spin mb-3"></div>
            <p class="text-gray-700">Sending OTP...</p>
          </div>
        </div>
      </div>
    </div>

    <!-- OTP Modal -->
    <div
      id="otpModal"
      class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center"
    >
      <div class="bg-white p-8 rounded-lg shadow-xl w-96">
        <h3 class="text-xl font-semibold mb-4">Enter OTP</h3>
        <p class="text-sm text-gray-600 mb-4">
          Please enter the OTP sent to your email
        </p>

        <!-- OTP Error Message -->
        <p id="otpError" class="text-[#9B1C1C] text-xs mt-1 mb-3 hidden"></p>

        <div class="flex gap-2 mb-4">
          <input
            type="text"
            maxlength="1"
            class="otp-input w-12 h-12 text-center border-2 rounded-lg"
          />
          <input
            type="text"
            maxlength="1"
            class="otp-input w-12 h-12 text-center border-2 rounded-lg"
          />
          <input
            type="text"
            maxlength="1"
            class="otp-input w-12 h-12 text-center border-2 rounded-lg"
          />
          <input
            type="text"
            maxlength="1"
            class="otp-input w-12 h-12 text-center border-2 rounded-lg"
          />
          <input
            type="text"
            maxlength="1"
            class="otp-input w-12 h-12 text-center border-2 rounded-lg"
          />
          <input
            type="text"
            maxlength="1"
            class="otp-input w-12 h-12 text-center border-2 rounded-lg"
          />
        </div>

        <button
          id="verifyOtp"
          class="w-full py-3 bg-black text-white font-semibold rounded-lg hover:bg-gray-800"
        >
          Verify OTP
        </button>

        <div class="text-center mt-4">
          <button id="resendOtp" class="text-blue-600 hover:underline">
            Resend OTP
          </button>
          <div id="resendTimer" class="text-sm text-gray-600 mt-1 hidden"></div>
          <p id="resendMessage" class="text-[#9B1C1C] text-xs mt-1 hidden"></p>
        </div>

        <!-- OTP Verification Loading Spinner -->
        <div id="otp-loading-spinner" class="hidden fixed inset-0 bg-black/50 flex items-center justify-center z-50">
          <div class="bg-white p-5 rounded-lg flex flex-col items-center">
            <div class="w-10 h-10 border-4 border-gray-200 border-t-blue-500 rounded-full animate-spin mb-3"></div>
            <p class="text-gray-700">Verifying OTP...</p>
          </div>
        </div>
      </div>
      
    </div>

    <!------------- Footer ------------>
    <%- include("../partials/footer") %>

    <script>
    document.addEventListener('DOMContentLoaded', function () {
      const form = document.getElementById('signup-form');
      const passwordToggles = document.querySelectorAll('.fa-eye');
  
      // Password validation function
      const validatePassword = (password) => {
          const minLength = 8;
          const maxLength = 12;
  
          // Check length
          if (password.length < minLength || password.length > maxLength) {
              return {
                  isValid: false,
                  message: `Password must be between ${minLength} and ${maxLength} characters long`
              };
          }
  
          // Check for uppercase letter
          if (!/[A-Z]/.test(password)) {
              return {
                  isValid: false,
                  message: 'Password must contain at least one uppercase letter'
              };
          }
  
          // Check for lowercase letter
          if (!/[a-z]/.test(password)) {
              return {
                  isValid: false,
                  message: 'Password must contain at least one lowercase letter'
              };
          }
  
          // Check for number
          if (!/[0-9]/.test(password)) {
              return {
                  isValid: false,
                  message: 'Password must contain at least one number'
              };
          }
  
          return { isValid: true };
      };
  
      // Helper function to show error
      const showError = (elementId, message) => {
          const errorElement = document.getElementById(elementId);
          errorElement.textContent = message;
          errorElement.classList.remove('hidden');
          // Add red border to input
          document.getElementById(elementId.replace('Error', '')).classList.add('border-red-500');
      };
  
      // Helper function to hide error
      const hideError = (elementId) => {
          const errorElement = document.getElementById(elementId);
          errorElement.classList.add('hidden');
          // Remove red border from input
          document.getElementById(elementId.replace('Error', '')).classList.remove('border-red-500');
      };
  
      // Real-time validation for First Name
      document.getElementById('firstName').addEventListener('input', function() {
          const value = this.value.trim();
          if (!/^[a-zA-Z]{3,10}$/.test(value)) {
              showError('firstNameError', 'First name should contain only letters (3-10 characters)');
          } else {
              hideError('firstNameError');
          }
      });
  
      // Real-time validation for Last Name
      document.getElementById('lastName').addEventListener('input', function() {
          const value = this.value.trim();
          if (!/^[a-zA-Z]{1,10}$/.test(value)) {
              showError('lastNameError', 'Last name should contain only letters (1-10 characters)');
          } else {
              hideError('lastNameError');
          }
      });
  
      // Real-time validation for Email
      document.getElementById('email').addEventListener('input', function() {
          const value = this.value.trim();
          if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value)) {
              showError('emailError', 'Please enter a valid email address');
          } else {
              hideError('emailError');
          }
      });
  
      // Real-time validation for Password
      document.getElementById('password').addEventListener('input', function() {
          const value = this.value;
          const validation = validatePassword(value);
          if (!validation.isValid) {
              showError('passwordError', validation.message);
          } else {
              hideError('passwordError');
          }
      });
  
      // Real-time validation for Confirm Password
      document.getElementById('confirmPassword').addEventListener('input', function() {
          const password = document.getElementById('password').value;
          if (this.value !== password) {
              showError('confirmPasswordError', 'Passwords do not match');
          } else {
              hideError('confirmPasswordError');
          }
      });
  
      // Form submission
      form.addEventListener('submit', async function (e) {
          e.preventDefault();
          let hasErrors = false;
  
          // Clear all previous errors
          const errorElements = document.querySelectorAll('[id$="Error"]');
          errorElements.forEach(element => element.classList.add('hidden'));
  
          const firstName = document.getElementById('firstName').value.trim();
          const lastName = document.getElementById('lastName').value.trim();
          const email = document.getElementById('email').value.trim();
          const password = document.getElementById('password').value;
          const confirmPassword = document.getElementById('confirmPassword').value;
  
          // Validate all fields
          if (!firstName || !/^[a-zA-Z]{3,10}$/.test(firstName)) {
              showError('firstNameError', 'First name should contain only letters (3-10 characters)');
              hasErrors = true;
          }
  
          if (!lastName || !/^[a-zA-Z]{1,10}$/.test(lastName)) {
              showError('lastNameError', 'Last name should contain only letters (1-10 characters)');
              hasErrors = true;
          }
  
          if (!email || !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
              showError('emailError', 'Please enter a valid email address');
              hasErrors = true;
          }
  
          const passwordValidation = validatePassword(password);
          if (!passwordValidation.isValid) {
              showError('passwordError', passwordValidation.message);
              hasErrors = true;
          }
  
          if (password !== confirmPassword) {
              showError('confirmPasswordError', 'Passwords do not match');
              hasErrors = true;
          }
  
          if (hasErrors) return;
  
          // Show loading spinner
          const loadingSpinner = document.getElementById('loading-spinner');
          loadingSpinner.classList.remove('hidden');
  
          // If no errors, proceed with form submission
          try {
              const response = await fetch('/signup', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                      firstName,
                      lastName,
                      email,
                      password
                  })
              });
  
              const data = await response.json();
              
              // Hide loading spinner
              loadingSpinner.classList.add('hidden');
  
              if (data.success) {
                  // Show OTP modal
                  document.getElementById('otpModal').classList.remove('hidden');
                  document.getElementById('otpModal').classList.add('flex');
              } else {
                  document.getElementById('generalError').textContent = data.message;
                  document.getElementById('generalError').classList.remove('hidden');
              }
          } catch (error) {
              // Hide loading spinner
              loadingSpinner.classList.add('hidden');
              
              console.error('Error:', error);
              document.getElementById('generalError').textContent = 'Something went wrong! Please try again.';
              document.getElementById('generalError').classList.remove('hidden');
          }
      });
  
      // Password toggle functionality
      passwordToggles.forEach(toggle => {
          toggle.addEventListener('click', function () {
              const input = this.closest('.relative').querySelector('input');
              if (input.type === 'password') {
                  input.type = 'text';
                  this.classList.remove('fa-eye');
                  this.classList.add('fa-eye-slash');
              } else {
                  input.type = 'password';
                  this.classList.remove('fa-eye-slash');
                  this.classList.add('fa-eye');
              }
          });
      });
  
      // Add OTP input handling
      const otpInputs = document.querySelectorAll('.otp-input');
      otpInputs.forEach((input, index) => {
          input.addEventListener('input', function () {
              if (this.value.length === 1) {
                  if (index < otpInputs.length - 1) otpInputs[index + 1].focus();
              }
          });
  
          input.addEventListener('keydown', function (e) {
              if (e.key === 'Backspace' && !this.value) {
                  if (index > 0) otpInputs[index - 1].focus();
              }
          });
      });
  
      // Handle OTP verification
      document.getElementById('verifyOtp').addEventListener('click', async function () {
          const otp = Array.from(otpInputs).map(input => input.value).join('');
          const email = document.getElementById('email').value;
          const otpError = document.getElementById('otpError');
          const otpLoadingSpinner = document.getElementById('otp-loading-spinner');
  
          try {
              // Show loading spinner
              otpLoadingSpinner.classList.remove('hidden');
              
              const response = await fetch('/validate-otp', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({ userOtp: otp, email })
              });
  
              const data = await response.json();
              
              // Hide loading spinner
              otpLoadingSpinner.classList.add('hidden');
  
              if (data.success) {
                  window.location.href = data.redirectUrl;
              } else {
                  // Show error message
                  otpError.textContent = data.error || 'Invalid OTP';
                  otpError.classList.remove('hidden');
                  
                  // Clear OTP inputs
                  otpInputs.forEach(input => input.value = '');
                  otpInputs[0].focus();
              }
          } catch (error) {
              // Hide loading spinner
              otpLoadingSpinner.classList.add('hidden');
              
              console.error('Error:', error);
              otpError.textContent = 'Failed to verify OTP';
              otpError.classList.remove('hidden');
          }
      });
  
      // Handle resend OTP
      document.getElementById('resendOtp').addEventListener('click', async function() {
          const email = document.getElementById('email').value;
          const resendButton = this;
          const resendMessage = document.getElementById('resendMessage');
          const otpError = document.getElementById('otpError');
          const resendTimer = document.getElementById('resendTimer');
          const loadingSpinner = document.getElementById('loading-spinner');
  
          try {
              // Disable button immediately to prevent multiple clicks
              resendButton.disabled = true;
              
              // Show loading spinner
              loadingSpinner.classList.remove('hidden');
              
              const response = await fetch('/resend-otp', {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({ email })
              });
  
              const data = await response.json();
  
              // Hide loading spinner
              loadingSpinner.classList.add('hidden');
  
              // Clear previous error message
              otpError.classList.add('hidden');
  
              // Show resend message
              resendMessage.textContent = data.message;
              resendMessage.classList.remove('hidden');
              resendMessage.style.color = data.success ? '#065F46' : '#9B1C1C';
  
              if (data.success) {
                  // Start countdown timer
                  let timeLeft = 60;
                  resendTimer.classList.remove('hidden');
                  const countdownInterval = setInterval(() => {
                      resendTimer.textContent = `Resend available in ${timeLeft}s`;
                      timeLeft--;
  
                      if (timeLeft < 0) {
                          clearInterval(countdownInterval);
                          resendButton.disabled = false;
                          resendTimer.classList.add('hidden');
                          resendMessage.classList.add('hidden');
                      }
                  }, 1000);
              } else {
                  // If failed, re-enable the button
                  resendButton.disabled = false;
              }
  
          } catch (error) {
              // Hide loading spinner
              loadingSpinner.classList.add('hidden');
              
              console.error('Error:', error);
              resendMessage.textContent = 'Failed to resend OTP';
              resendMessage.classList.remove('hidden');
              resendButton.disabled = false;
          }
      });
  });
  </script>
  </body>
</html>
